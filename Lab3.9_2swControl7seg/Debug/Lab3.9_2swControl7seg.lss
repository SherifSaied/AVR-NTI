
Lab3.9_2swControl7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000004a4  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000966  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define PORTD    	*((u8*)0x32)
#define DDRD    	*((u8*)0x31)
#define PIND    	*((volatile u8*)0x30)

int main (void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	62 97       	sbiw	r28, 0x12	; 18
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	//set direction pin0 , pin1 as input for push button
	DDRA &= ~(1<<0) ;
  96:	aa e3       	ldi	r26, 0x3A	; 58
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	8c 93       	st	X, r24
	DDRA &= ~(1<<1) ;
  a4:	aa e3       	ldi	r26, 0x3A	; 58
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	ea e3       	ldi	r30, 0x3A	; 58
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	8c 93       	st	X, r24
	//activate pull-up for push button
	PORTA |= (1<<0) ;
  b2:	ab e3       	ldi	r26, 0x3B	; 59
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	eb e3       	ldi	r30, 0x3B	; 59
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c 93       	st	X, r24
	PORTA |= (1<<1) ;
  c0:	ab e3       	ldi	r26, 0x3B	; 59
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	eb e3       	ldi	r30, 0x3B	; 59
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8c 93       	st	X, r24
	//set direction for sevSeg as output on PORTD
	DDRD = (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6) ;
  ce:	e1 e3       	ldi	r30, 0x31	; 49
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f e7       	ldi	r24, 0x7F	; 127
  d4:	80 83       	st	Z, r24
	//normal mode is off for sevSeg
	PORTD = 0x00 ;
  d6:	e2 e3       	ldi	r30, 0x32	; 50
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
	u8 pinStatus1,pinStatus2 ;
	u8 counter=0 ;
  dc:	19 82       	std	Y+1, r1	; 0x01
	//arrSevenSeg common cathod
	u8 segCthd[]={0x3f,0x06,0x5b,
				  0x4f,0x66,0x6d,
				  0x7d,0x07,0x7f,
				  0x6f} ;
  de:	ce 01       	movw	r24, r28
  e0:	04 96       	adiw	r24, 0x04	; 4
  e2:	9f 87       	std	Y+15, r25	; 0x0f
  e4:	8e 87       	std	Y+14, r24	; 0x0e
  e6:	e0 e6       	ldi	r30, 0x60	; 96
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	f9 8b       	std	Y+17, r31	; 0x11
  ec:	e8 8b       	std	Y+16, r30	; 0x10
  ee:	fa e0       	ldi	r31, 0x0A	; 10
  f0:	fa 8b       	std	Y+18, r31	; 0x12
  f2:	e8 89       	ldd	r30, Y+16	; 0x10
  f4:	f9 89       	ldd	r31, Y+17	; 0x11
  f6:	00 80       	ld	r0, Z
  f8:	88 89       	ldd	r24, Y+16	; 0x10
  fa:	99 89       	ldd	r25, Y+17	; 0x11
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	99 8b       	std	Y+17, r25	; 0x11
 100:	88 8b       	std	Y+16, r24	; 0x10
 102:	ee 85       	ldd	r30, Y+14	; 0x0e
 104:	ff 85       	ldd	r31, Y+15	; 0x0f
 106:	00 82       	st	Z, r0
 108:	8e 85       	ldd	r24, Y+14	; 0x0e
 10a:	9f 85       	ldd	r25, Y+15	; 0x0f
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	9f 87       	std	Y+15, r25	; 0x0f
 110:	8e 87       	std	Y+14, r24	; 0x0e
 112:	9a 89       	ldd	r25, Y+18	; 0x12
 114:	91 50       	subi	r25, 0x01	; 1
 116:	9a 8b       	std	Y+18, r25	; 0x12
 118:	ea 89       	ldd	r30, Y+18	; 0x12
 11a:	ee 23       	and	r30, r30
 11c:	51 f7       	brne	.-44     	; 0xf2 <main+0x70>


	while(1)
	{
		pinStatus1 = ((PINA>>0)&1) ; //get read push button1
 11e:	e9 e3       	ldi	r30, 0x39	; 57
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 70       	andi	r24, 0x01	; 1
 126:	8b 83       	std	Y+3, r24	; 0x03
		pinStatus2 = ((PINA>>1)&1) ; //get read push button2
 128:	e9 e3       	ldi	r30, 0x39	; 57
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	86 95       	lsr	r24
 130:	81 70       	andi	r24, 0x01	; 1
 132:	8a 83       	std	Y+2, r24	; 0x02
		//counter increase and when reach 9 do nothing
		if (pinStatus1 == 0 && counter < 9)
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	88 23       	and	r24, r24
 138:	79 f4       	brne	.+30     	; 0x158 <main+0xd6>
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	89 30       	cpi	r24, 0x09	; 9
 13e:	60 f4       	brcc	.+24     	; 0x158 <main+0xd6>
		{
			counter++ ;
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	89 83       	std	Y+1, r24	; 0x01
			while (((PINA>>0)&1) == 0) ; //busy wait long press
 146:	e9 e3       	ldi	r30, 0x39	; 57
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	81 70       	andi	r24, 0x01	; 1
 152:	90 70       	andi	r25, 0x00	; 0
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	b9 f3       	breq	.-18     	; 0x146 <main+0xc4>

		}
		//counter decrease and when reach 0 do nothing
		if (pinStatus2 == 0 && counter > 0)
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	88 23       	and	r24, r24
 15c:	81 f4       	brne	.+32     	; 0x17e <main+0xfc>
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	88 23       	and	r24, r24
 162:	69 f0       	breq	.+26     	; 0x17e <main+0xfc>
		{
			counter-- ;
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	81 50       	subi	r24, 0x01	; 1
 168:	89 83       	std	Y+1, r24	; 0x01
			while (((PINA>>1)&1) == 0) ; //busy wait long press
 16a:	e9 e3       	ldi	r30, 0x39	; 57
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	86 95       	lsr	r24
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	81 70       	andi	r24, 0x01	; 1
 178:	90 70       	andi	r25, 0x00	; 0
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	b1 f3       	breq	.-20     	; 0x16a <main+0xe8>

		}
		//display counter on sevSeg
		PORTD = segCthd[counter] ;
 17e:	a2 e3       	ldi	r26, 0x32	; 50
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	ce 01       	movw	r24, r28
 18a:	04 96       	adiw	r24, 0x04	; 4
 18c:	fc 01       	movw	r30, r24
 18e:	e2 0f       	add	r30, r18
 190:	f3 1f       	adc	r31, r19
 192:	80 81       	ld	r24, Z
 194:	8c 93       	st	X, r24
 196:	c3 cf       	rjmp	.-122    	; 0x11e <main+0x9c>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
