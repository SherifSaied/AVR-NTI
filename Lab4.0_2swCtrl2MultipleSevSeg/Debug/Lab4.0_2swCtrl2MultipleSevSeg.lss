
Lab4.0_2swCtrl2MultipleSevSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000510  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000097b  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define PORTD    	*((u8*)0x32)
#define DDRD    	*((u8*)0x31)
#define PIND    	*((volatile u8*)0x30)

int main (void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	//set direction pin0 , pin1 as input for push button
	DDRA &= ~(1<<0) ;
  96:	aa e3       	ldi	r26, 0x3A	; 58
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	ea e3       	ldi	r30, 0x3A	; 58
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	8c 93       	st	X, r24
	DDRA &= ~(1<<1) ;
  a4:	aa e3       	ldi	r26, 0x3A	; 58
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	ea e3       	ldi	r30, 0x3A	; 58
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	8c 93       	st	X, r24
	//activate pull-up for push button
	PORTA |= (1<<0) ;
  b2:	ab e3       	ldi	r26, 0x3B	; 59
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	eb e3       	ldi	r30, 0x3B	; 59
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c 93       	st	X, r24
	PORTA |= (1<<1) ;
  c0:	ab e3       	ldi	r26, 0x3B	; 59
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	eb e3       	ldi	r30, 0x3B	; 59
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8c 93       	st	X, r24
	//set direction for mpxsevSeg1 as output on PORTC
	DDRC = 0xff ;
  ce:	e4 e3       	ldi	r30, 0x34	; 52
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	80 83       	st	Z, r24
	//set direction for mpxsevSeg2 as output on PORTD
	DDRD = 0xff ;
  d6:	e1 e3       	ldi	r30, 0x31	; 49
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	80 83       	st	Z, r24
	//normal mode is off for mpxsevSeg1 , mpxsevSeg2
	PORTC = 0x00 ;
  de:	e5 e3       	ldi	r30, 0x35	; 53
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	10 82       	st	Z, r1
	PORTD = 0x00 ;
  e4:	e2 e3       	ldi	r30, 0x32	; 50
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	10 82       	st	Z, r1
	//arrSevenSeg common cathod
	u8 segCthd[]={0x3f,0x06,0x5b,
				  0x4f,0x66,0x6d,
				  0x7d,0x07,0x7f,
				  0x6f} ;
  ea:	ce 01       	movw	r24, r28
  ec:	06 96       	adiw	r24, 0x06	; 6
  ee:	99 8b       	std	Y+17, r25	; 0x11
  f0:	88 8b       	std	Y+16, r24	; 0x10
  f2:	e0 e6       	ldi	r30, 0x60	; 96
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	fb 8b       	std	Y+19, r31	; 0x13
  f8:	ea 8b       	std	Y+18, r30	; 0x12
  fa:	fa e0       	ldi	r31, 0x0A	; 10
  fc:	fc 8b       	std	Y+20, r31	; 0x14
  fe:	ea 89       	ldd	r30, Y+18	; 0x12
 100:	fb 89       	ldd	r31, Y+19	; 0x13
 102:	00 80       	ld	r0, Z
 104:	8a 89       	ldd	r24, Y+18	; 0x12
 106:	9b 89       	ldd	r25, Y+19	; 0x13
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	9b 8b       	std	Y+19, r25	; 0x13
 10c:	8a 8b       	std	Y+18, r24	; 0x12
 10e:	e8 89       	ldd	r30, Y+16	; 0x10
 110:	f9 89       	ldd	r31, Y+17	; 0x11
 112:	00 82       	st	Z, r0
 114:	88 89       	ldd	r24, Y+16	; 0x10
 116:	99 89       	ldd	r25, Y+17	; 0x11
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	99 8b       	std	Y+17, r25	; 0x11
 11c:	88 8b       	std	Y+16, r24	; 0x10
 11e:	9c 89       	ldd	r25, Y+20	; 0x14
 120:	91 50       	subi	r25, 0x01	; 1
 122:	9c 8b       	std	Y+20, r25	; 0x14
 124:	ec 89       	ldd	r30, Y+20	; 0x14
 126:	ee 23       	and	r30, r30
 128:	51 f7       	brne	.-44     	; 0xfe <main+0x7c>
	u8 pinStatus1, pinStatus2;
	//when start display display 50
	u8 counter=50 ;
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	8b 83       	std	Y+3, r24	; 0x03
	u8 one,deci;
	while(1)
	{

		pinStatus1 = ((PINA>>0)&1) ;
 12e:	e9 e3       	ldi	r30, 0x39	; 57
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	81 70       	andi	r24, 0x01	; 1
 136:	8d 83       	std	Y+5, r24	; 0x05
		pinStatus2 = ((PINA>>1)&1) ;
 138:	e9 e3       	ldi	r30, 0x39	; 57
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 95       	lsr	r24
 140:	81 70       	andi	r24, 0x01	; 1
 142:	8c 83       	std	Y+4, r24	; 0x04
		if (pinStatus1 == 0)
 144:	8d 81       	ldd	r24, Y+5	; 0x05
 146:	88 23       	and	r24, r24
 148:	61 f4       	brne	.+24     	; 0x162 <main+0xe0>
		{
			counter++ ;
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	8b 83       	std	Y+3, r24	; 0x03
			while (((PINA>>0)&1)==0) ;
 150:	e9 e3       	ldi	r30, 0x39	; 57
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	90 70       	andi	r25, 0x00	; 0
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	b9 f3       	breq	.-18     	; 0x150 <main+0xce>
		}
		if (pinStatus2 == 0)
 162:	8c 81       	ldd	r24, Y+4	; 0x04
 164:	88 23       	and	r24, r24
 166:	69 f4       	brne	.+26     	; 0x182 <main+0x100>
		{
			counter-- ;
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	8b 83       	std	Y+3, r24	; 0x03
			while (((PINA>>1)&1)==0) ;
 16e:	e9 e3       	ldi	r30, 0x39	; 57
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	86 95       	lsr	r24
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	b1 f3       	breq	.-20     	; 0x16e <main+0xec>
		}
		one=counter%10 ;
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	9a e0       	ldi	r25, 0x0A	; 10
 186:	69 2f       	mov	r22, r25
 188:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__udivmodqi4>
 18c:	89 2f       	mov	r24, r25
 18e:	8a 83       	std	Y+2, r24	; 0x02
		deci=counter/10 ;
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	9a e0       	ldi	r25, 0x0A	; 10
 194:	69 2f       	mov	r22, r25
 196:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__udivmodqi4>
 19a:	89 83       	std	Y+1, r24	; 0x01

		PORTC = segCthd[deci] ;
 19c:	a5 e3       	ldi	r26, 0x35	; 53
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	ce 01       	movw	r24, r28
 1a8:	06 96       	adiw	r24, 0x06	; 6
 1aa:	fc 01       	movw	r30, r24
 1ac:	e2 0f       	add	r30, r18
 1ae:	f3 1f       	adc	r31, r19
 1b0:	80 81       	ld	r24, Z
 1b2:	8c 93       	st	X, r24
		PORTD = segCthd[one] ;
 1b4:	a2 e3       	ldi	r26, 0x32	; 50
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ba:	28 2f       	mov	r18, r24
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	ce 01       	movw	r24, r28
 1c0:	06 96       	adiw	r24, 0x06	; 6
 1c2:	fc 01       	movw	r30, r24
 1c4:	e2 0f       	add	r30, r18
 1c6:	f3 1f       	adc	r31, r19
 1c8:	80 81       	ld	r24, Z
 1ca:	8c 93       	st	X, r24
		if (counter > 99)
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	84 36       	cpi	r24, 0x64	; 100
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <main+0x152>
 1d2:	ad cf       	rjmp	.-166    	; 0x12e <main+0xac>
		{
			counter = 0 ;
 1d4:	1b 82       	std	Y+3, r1	; 0x03
 1d6:	ab cf       	rjmp	.-170    	; 0x12e <main+0xac>

000001d8 <__udivmodqi4>:
 1d8:	99 1b       	sub	r25, r25
 1da:	79 e0       	ldi	r23, 0x09	; 9
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <__udivmodqi4_ep>

000001de <__udivmodqi4_loop>:
 1de:	99 1f       	adc	r25, r25
 1e0:	96 17       	cp	r25, r22
 1e2:	08 f0       	brcs	.+2      	; 0x1e6 <__udivmodqi4_ep>
 1e4:	96 1b       	sub	r25, r22

000001e6 <__udivmodqi4_ep>:
 1e6:	88 1f       	adc	r24, r24
 1e8:	7a 95       	dec	r23
 1ea:	c9 f7       	brne	.-14     	; 0x1de <__udivmodqi4_loop>
 1ec:	80 95       	com	r24
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
